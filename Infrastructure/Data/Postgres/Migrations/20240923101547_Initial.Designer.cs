// <auto-generated />
using System;
using Infrastructure.Data.Postgres.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Postgres.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20240923101547_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminID")
                        .HasColumnType("integer");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminID = 0,
                            ContactInformation = "0555",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(4273),
                            FirstName = "Emre",
                            IsDeleted = false,
                            LastName = "Oz",
                            Password = "123",
                            Username = "Emre"
                        },
                        new
                        {
                            Id = 2,
                            AdminID = 0,
                            ContactInformation = "0555",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(4286),
                            FirstName = "Batuhan",
                            IsDeleted = false,
                            LastName = "Ya",
                            Password = "123",
                            Username = "Batuhan"
                        },
                        new
                        {
                            Id = 3,
                            AdminID = 0,
                            ContactInformation = "0555",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(4295),
                            FirstName = "Ziya",
                            IsDeleted = false,
                            LastName = "XX",
                            Password = "123",
                            Username = "Ziya"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiseaseID")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Diseases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(9325),
                            Description = "Açıklama1",
                            DiseaseID = 0,
                            DiseaseName = "Hasta1",
                            IsDeleted = false,
                            Symptoms = "Semptomlar1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(9335),
                            Description = "Açıklama2",
                            DiseaseID = 0,
                            DiseaseName = "Hasta2",
                            IsDeleted = false,
                            Symptoms = "Semptomlar2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(9344),
                            Description = "Açıklama3",
                            DiseaseID = 0,
                            DiseaseName = "Hasta3",
                            IsDeleted = false,
                            Symptoms = "Semptomlar3"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DoctorUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInformation = "0555",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(6174),
                            DoctorID = 0,
                            DoctorPassword = "123",
                            DoctorUsername = "Doktor1",
                            FirstName = "A",
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "A"
                        },
                        new
                        {
                            Id = 2,
                            ContactInformation = "0555",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(6195),
                            DoctorID = 0,
                            DoctorPassword = "123",
                            DoctorUsername = "Doktor2",
                            FirstName = "B",
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "B"
                        },
                        new
                        {
                            Id = 3,
                            ContactInformation = "0555",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(6216),
                            DoctorID = 0,
                            DoctorPassword = "123",
                            DoctorUsername = "Doktor3",
                            FirstName = "C",
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "C"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.DoctorPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoctorID")
                        .HasColumnType("integer");

                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("DoctorPatients");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MedicationID")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsageInstructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveIngredient = "3",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 563, DateTimeKind.Utc).AddTicks(987),
                            IsDeleted = false,
                            MedicationID = 0,
                            MedicationName = "İlaç1",
                            UsageInstructions = "2"
                        },
                        new
                        {
                            Id = 2,
                            ActiveIngredient = "3",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 563, DateTimeKind.Utc).AddTicks(997),
                            IsDeleted = false,
                            MedicationID = 0,
                            MedicationName = "İlaç2",
                            UsageInstructions = "2"
                        },
                        new
                        {
                            Id = 3,
                            ActiveIngredient = "3",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 563, DateTimeKind.Utc).AddTicks(1006),
                            IsDeleted = false,
                            MedicationID = 0,
                            MedicationName = "İlaç3",
                            UsageInstructions = "2"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.MedicationPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MedicationID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MedicationID");

                    b.HasIndex("PatientID");

                    b.ToTable("MedicationPatients");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInformation = "0555",
                            CreatedAt = new DateTime(2024, 9, 23, 13, 15, 47, 562, DateTimeKind.Utc).AddTicks(8878),
                            DateOfBirth = "30.07.2001",
                            EmergencyContactFirstName = "X",
                            EmergencyContactLastName = "X",
                            EmergencyContactPhone = "0256",
                            FirstName = "XX",
                            Gender = "M",
                            IsDeleted = false,
                            IsFirstLogin = false,
                            LastName = "XX",
                            Password = "123",
                            PatientID = 0,
                            Username = "Hasta1"
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.PatientDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiseaseID")
                        .HasColumnType("integer");

                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientDiseases");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.DoctorPatient", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Postgres.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.MedicationPatient", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.Medication", "Medication")
                        .WithMany("MedicationPatients")
                        .HasForeignKey("MedicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Postgres.Entities.Patient", "Patient")
                        .WithMany("MedicationPatients")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.PatientDisease", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.Disease", "Disease")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("DiseaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Postgres.Entities.Patient", "Patient")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Disease", b =>
                {
                    b.Navigation("PatientDiseases");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Doctor", b =>
                {
                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Medication", b =>
                {
                    b.Navigation("MedicationPatients");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Patient", b =>
                {
                    b.Navigation("MedicationPatients");

                    b.Navigation("PatientDiseases");
                });
#pragma warning restore 612, 618
        }
    }
}
